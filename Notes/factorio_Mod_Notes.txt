Episode 1 - Basic Mod Structure
Folder name format: {mod-name}_{version} (Example: "newMod_0.0.1")

Files:
- info.json
- thumbnail.png  -- Ideally 144x144px
-- changelog.txt -- Version history of thew mod to be shown in mod browser (Optional)
- settings.lua - settings-updates.lua (settings-final-fixes.lua) - lets the user change the settings of the mod
- data.lua -- updates.lua data-final-fixes.lua - This is the source code. Defines prototypes
- control.lua -- Runtime application of the game

Fist step is loading settings in the natrual sort order
sub folder:
- Locale -- defines translations
- Scenarios
- Campaigns
- Tutorals
- Migrations -- Handles prototypes changtes between updates to the mod. If no migration script is written, old prototypes will be removed from the world.

//Example info.json
{
     name : "mod-name" // must match the folder name format
     "version:" : "0.0.1"
}
More on mods:
https://wiki.factorio.com/Tutorial:Mod_structure

How factorio loads mods

- Load order
     - Mods are loaded by dependency then by aplphabetical order
          - dependencies are either optional, required, or restrictive (cant have these). Failed dependencies causes game not to load
     - Settings stage (1st stage)
          - defines mod settings. Looks through all mods then executes for settings.lua, then settings-updates.lua, then settings-final-fixes.lua
          - This stage does not have access to prototype or Runtime data.
          - Mod settings Tutoral: https://wiki.factorio.com/Tutorial:Mod_settings
     - Data Stage (2nd stage)
          - Declare prototypes for tech, entities and more. Anything else is restricted
          - Looks through then executes all mods for data.lua, then data-updates.lua, then data-updates-final.lua
          - prototype documentation: https://lua-api.factorio.com/latest/index-prototype.html
     - Migrations
          - Fixes saves after mod updates. Whenever a prototype changes due to mod update, you need a migration script to update the prototypes or else they will be removed from the game.
     - Runtime stage
          - Runs the control.lua script. This is what makes the mod do things during the game instead of before the game.
          - Uses event handlers to access tables 
          - Reloaded on game restart or reload